name: Build & Deploy (main)

on:
  push: { branches: [ main ] }
  workflow_dispatch: { }

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Map repo -> service & port
      - name: Derive service metadata
        id: meta
        run: |
          REPO="${GITHUB_REPOSITORY##*/}"
          case "$REPO" in
            osm-sec)     echo "service_name=securityservice"      >> $GITHUB_OUTPUT; echo "service_port=8088" >> $GITHUB_OUTPUT ;;
            osm-fin)     echo "service_name=financeservice"        >> $GITHUB_OUTPUT; echo "service_port=8085" >> $GITHUB_OUTPUT ;;
            osm-prod)    echo "service_name=oilproductionservice"  >> $GITHUB_OUTPUT; echo "service_port=8083" >> $GITHUB_OUTPUT ;;
            osm-hr)      echo "service_name=hrservice"             >> $GITHUB_OUTPUT; echo "service_port=8086" >> $GITHUB_OUTPUT ;;
            osm-gateway) echo "service_name=gateway"               >> $GITHUB_OUTPUT; echo "service_port=8084" >> $GITHUB_OUTPUT ;;
            osm-eureka)  echo "service_name=eureka"                >> $GITHUB_OUTPUT; echo "service_port=8761" >> $GITHUB_OUTPUT ;;
            osm-parent)  echo "skip_build=true"                    >> $GITHUB_OUTPUT ;;
            *) echo "Unknown repository: $REPO"; exit 1 ;;
          esac

      - name: Stop if build is skipped
        if: steps.meta.outputs.skip_build == 'true'
        run: echo "Skipping parent repo."

      - name: Set up JDK 21
        if: steps.meta.outputs.skip_build != 'true'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      # Render a REAL settings.xml with concrete creds and GH Packages repos
      - name: Generate Maven settings.xml (rendered)
        if: steps.meta.outputs.skip_build != 'true'
        run: |
          mkdir -p "$RUNNER_TEMP"
          TOKEN="${{ secrets.GH_PACKAGES_TOKEN || github.token }}"
          cat > "$RUNNER_TEMP/maven_settings.xml" <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers><server><id>github</id><username>${{ github.actor }}</username><password>${TOKEN}</password></server></servers>
            <profiles><profile><id>github-packages</id>
              <repositories><repository><id>github</id><url>https://maven.pkg.github.com/x-dev-grp/osm-parent</url><snapshots><enabled>true</enabled></snapshots></repository></repositories>
              <pluginRepositories><pluginRepository><id>github</id><url>https://maven.pkg.github.com/x-dev-grp/osm-parent</url><snapshots><enabled>true</enabled></snapshots></pluginRepository></pluginRepositories>
            </profile></profiles>
            <activeProfiles><activeProfile>github-packages</activeProfile></activeProfiles>
          </settings>
          EOF

      - name: Preflight resolve
        if: steps.meta.outputs.skip_build != 'true'
        run: mvn -B -s "$RUNNER_TEMP/maven_settings.xml" -DskipTests -U dependency:go-offline

      - name: Set up Buildx
        if: steps.meta.outputs.skip_build != 'true'
        uses: docker/setup-buildx-action@v3
        with: { install: true }

      - name: Login to GHCR
        if: steps.meta.outputs.skip_build != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        if: steps.meta.outputs.skip_build != 'true'
        env:
          IMAGE: ghcr.io/${{ env.OWNER }}/${{ steps.meta.outputs.service_name }}
          TAG_SHA: main-${{ github.sha }}
          SERVICE_PORT: ${{ steps.meta.outputs.service_port }}
        run: |
          docker buildx build \
            --progress=plain --push --platform linux/amd64 \
            --build-arg SERVICE_PORT="${SERVICE_PORT}" \
            --secret id=maven_settings,src="${RUNNER_TEMP}/maven_settings.xml" \
            -t "${IMAGE}:${TAG_SHA}" -t "${IMAGE}:release-latest" .

  deploy:
    needs: build-push
    if: needs.build-push.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Start ssh-agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS to known_hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Pull & Restart stack
        env:
          GHCR_USER: ${{ secrets.GHCR_USER }}     # e.g. org or bot user
          GHCR_PAT: ${{ secrets.GHCR_PAT }}      # PAT with read:packages
        run: |
          ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} \
            "export GHCR_USER='$GHCR_USER' GHCR_PAT='$GHCR_PAT'; bash /opt/osm/scripts/deploy.sh"
