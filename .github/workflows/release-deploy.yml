name: Build & Deploy (main)

on:
  push:
    branches: [ main ]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  build-push:
    name: Build & Push Docker image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Map repo -> image name & port
      - name: Derive service metadata
        id: meta
        run: |
          REPO="${GITHUB_REPOSITORY##*/}"
          SERVICE_NAME=""
          SERVICE_PORT="8080"
          SKIP_BUILD="false"
          case "$REPO" in
            osm-sec)     SERVICE_NAME="securityservice";      SERVICE_PORT="8088" ;;
            osm-fin)     SERVICE_NAME="financeservice";        SERVICE_PORT="8085" ;;
            osm-prod)    SERVICE_NAME="oilproductionservice";  SERVICE_PORT="8083" ;;
            osm-hr)      SERVICE_NAME="hrservice";             SERVICE_PORT="8086" ;;
            osm-gateway) SERVICE_NAME="gateway";               SERVICE_PORT="8084" ;;
            osm-eureka)  SERVICE_NAME="eureka";                SERVICE_PORT="8761" ;;
            osm-parent)  SKIP_BUILD="true" ;;
            *) echo "Unknown repository: $REPO" && exit 1 ;;
          esac
          echo "service_name=$SERVICE_NAME"   >> $GITHUB_OUTPUT
          echo "service_port=$SERVICE_PORT"   >> $GITHUB_OUTPUT
          echo "skip_build=$SKIP_BUILD"       >> $GITHUB_OUTPUT

      - name: Stop if build is skipped
        if: steps.meta.outputs.skip_build == 'true'
        run: echo "Skipping parent/pom-only repo."

      # Render a REAL settings.xml with concrete creds and GH Packages repos
      - name: Generate Maven settings.xml (rendered)
        if: steps.meta.outputs.skip_build != 'true'
        run: |
          mkdir -p "$RUNNER_TEMP"
          TOKEN="${{ secrets.GH_PACKAGES_TOKEN }}"
          if [ -z "$TOKEN" ]; then TOKEN="${{ github.token }}"; fi
          cat > "$RUNNER_TEMP/maven_settings.xml" <<EOF
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${TOKEN}</password>
              </server>
            </servers>
            <profiles>
              <profile>
                <id>github-packages</id>
                <repositories>
                  <repository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/x-dev-grp/osm-parent</url>
                    <snapshots><enabled>true</enabled></snapshots>
                  </repository>
                </repositories>
                <pluginRepositories>
                  <pluginRepository>
                    <id>github</id>
                    <url>https://maven.pkg.github.com/x-dev-grp/osm-parent</url>
                    <snapshots><enabled>true</enabled></snapshots>
                  </pluginRepository>
                </pluginRepositories>
              </profile>
            </profiles>
            <activeProfiles><activeProfile>github-packages</activeProfile></activeProfiles>
          </settings>
          EOF
          # sanity: show first line
          head -n1 "$RUNNER_TEMP/maven_settings.xml"

      # Optional but helpful: fail early with a clear Maven error before Docker
      - name: Preflight dependency resolve on runner
        if: steps.meta.outputs.skip_build != 'true'
        run: |
          mvn -B -s "$RUNNER_TEMP/maven_settings.xml" -DskipTests -U dependency:go-offline

      # Set up buildx (builder) for CLI use
      - name: Set up Buildx
        if: steps.meta.outputs.skip_build != 'true'
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to GHCR
        if: steps.meta.outputs.skip_build != 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.OWNER }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Use CLI 'docker buildx build' and pass the secret explicitly
      - name: Build & Push image (CLI + BuildKit secret)
        if: steps.meta.outputs.skip_build != 'true'
        env:
          IMAGE: ghcr.io/${{ env.OWNER }}/${{ steps.meta.outputs.service_name }}
          TAG_SHA: main-${{ github.sha }}
          SERVICE_PORT: ${{ steps.meta.outputs.service_port }}
        run: |
          set -eux
          docker buildx version
          # build & push in one step; ensure BuildKit secret is passed
          docker buildx build \
            --progress=plain \
            --push \
            --platform linux/amd64 \
            --build-arg SERVICE_PORT="${SERVICE_PORT}" \
            --secret id=maven_settings,src="${RUNNER_TEMP}/maven_settings.xml" \
            -t "${IMAGE}:${TAG_SHA}" \
            -t "${IMAGE}:release-latest" \
            .

  deploy:
    name: Deploy to VPS
    needs: build-push
    runs-on: ubuntu-latest
    if: needs.build-push.result == 'success'
    steps:
      - name: SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add VPS to known_hosts
        run: ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts

      - name: Pull & Restart stack
        run: ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} '/opt/osm/scripts/deploy.sh'
